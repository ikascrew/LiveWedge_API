// This file is auto-generated by gen.go. Do not edit.

package libvsw

import (
	"bytes"
	"encoding/binary"
	"log"
	"unsafe"
)

var (
	SwMode      SwModeType
	_SwModeChan chan SwModeType
)

// RequestSwMode gets chan for beging notifyed SwMode changed.
func (vsw Vsw) RequestSwMode() <-chan SwModeType {
	if _SwModeChan == nil {
		_SwModeChan = make(chan SwModeType)
	}
	return _SwModeChan
}

func readSwMode(len int, reader *bytes.Reader) {
	var a SwModeType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if SwMode != a {
		//log.Printf("%#v\n", a)
		SwMode = a
		if _SwModeChan != nil {
			_SwModeChan <- a
		}
	}
}

var (
	DefaultBackgroundColor      DefaultBackgroundColorType
	_DefaultBackgroundColorChan chan DefaultBackgroundColorType
)

// RequestDefaultBackgroundColor gets chan for beging notifyed DefaultBackgroundColor changed.
func (vsw Vsw) RequestDefaultBackgroundColor() <-chan DefaultBackgroundColorType {
	if _DefaultBackgroundColorChan == nil {
		_DefaultBackgroundColorChan = make(chan DefaultBackgroundColorType)
	}
	return _DefaultBackgroundColorChan
}

func readDefaultBackgroundColor(len int, reader *bytes.Reader) {
	var a DefaultBackgroundColorType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if DefaultBackgroundColor != a {
		//log.Printf("%#v\n", a)
		DefaultBackgroundColor = a
		if _DefaultBackgroundColorChan != nil {
			_DefaultBackgroundColorChan <- a
		}
	}
}

var (
	MountStatus      MountStatusType
	_MountStatusChan chan MountStatusType
)

// RequestMountStatus gets chan for beging notifyed MountStatus changed.
func (vsw Vsw) RequestMountStatus() <-chan MountStatusType {
	if _MountStatusChan == nil {
		_MountStatusChan = make(chan MountStatusType)
	}
	return _MountStatusChan
}

func readMountStatus(len int, reader *bytes.Reader) {
	var a MountStatusType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if MountStatus != a {
		//log.Printf("%#v\n", a)
		MountStatus = a
		if _MountStatusChan != nil {
			_MountStatusChan <- a
		}
	}
}

var (
	PreviewMode      PreviewModeType
	_PreviewModeChan chan PreviewModeType
)

// RequestPreviewMode gets chan for beging notifyed PreviewMode changed.
func (vsw Vsw) RequestPreviewMode() <-chan PreviewModeType {
	if _PreviewModeChan == nil {
		_PreviewModeChan = make(chan PreviewModeType)
	}
	return _PreviewModeChan
}

func readPreviewMode(len int, reader *bytes.Reader) {
	var a PreviewModeType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if PreviewMode != a {
		//log.Printf("%#v\n", a)
		PreviewMode = a
		if _PreviewModeChan != nil {
			_PreviewModeChan <- a
		}
	}
}

var (
	RecordingStatus      RecordingStatusType
	_RecordingStatusChan chan RecordingStatusType
)

// RequestRecordingStatus gets chan for beging notifyed RecordingStatus changed.
func (vsw Vsw) RequestRecordingStatus() <-chan RecordingStatusType {
	if _RecordingStatusChan == nil {
		_RecordingStatusChan = make(chan RecordingStatusType)
	}
	return _RecordingStatusChan
}

func readRecordingStatus(len int, reader *bytes.Reader) {
	var a RecordingStatusType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if RecordingStatus != a {
		//log.Printf("%#v\n", a)
		RecordingStatus = a
		if _RecordingStatusChan != nil {
			_RecordingStatusChan <- a
		}
	}
}

var (
	FadeToDefaultColorStatus      FadeToDefaultColorStatusType
	_FadeToDefaultColorStatusChan chan FadeToDefaultColorStatusType
)

// RequestFadeToDefaultColorStatus gets chan for beging notifyed FadeToDefaultColorStatus changed.
func (vsw Vsw) RequestFadeToDefaultColorStatus() <-chan FadeToDefaultColorStatusType {
	if _FadeToDefaultColorStatusChan == nil {
		_FadeToDefaultColorStatusChan = make(chan FadeToDefaultColorStatusType)
	}
	return _FadeToDefaultColorStatusChan
}

func readFadeToDefaultColorStatus(len int, reader *bytes.Reader) {
	var a FadeToDefaultColorStatusType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if FadeToDefaultColorStatus != a {
		//log.Printf("%#v\n", a)
		FadeToDefaultColorStatus = a
		if _FadeToDefaultColorStatusChan != nil {
			_FadeToDefaultColorStatusChan <- a
		}
	}
}

var (
	ExternalInputStatus      ExternalInputStatusType
	_ExternalInputStatusChan chan ExternalInputStatusType
)

// RequestExternalInputStatus gets chan for beging notifyed ExternalInputStatus changed.
func (vsw Vsw) RequestExternalInputStatus() <-chan ExternalInputStatusType {
	if _ExternalInputStatusChan == nil {
		_ExternalInputStatusChan = make(chan ExternalInputStatusType)
	}
	return _ExternalInputStatusChan
}

func readExternalInputStatus(len int, reader *bytes.Reader) {
	var a ExternalInputStatusType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if ExternalInputStatus != a {
		//log.Printf("%#v\n", a)
		ExternalInputStatus = a
		if _ExternalInputStatusChan != nil {
			_ExternalInputStatusChan <- a
		}
	}
}

var (
	ProgramOutStatus      ProgramOutStatusType
	_ProgramOutStatusChan chan ProgramOutStatusType
)

// RequestProgramOutStatus gets chan for beging notifyed ProgramOutStatus changed.
func (vsw Vsw) RequestProgramOutStatus() <-chan ProgramOutStatusType {
	if _ProgramOutStatusChan == nil {
		_ProgramOutStatusChan = make(chan ProgramOutStatusType)
	}
	return _ProgramOutStatusChan
}

func readProgramOutStatus(len int, reader *bytes.Reader) {
	var a ProgramOutStatusType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if ProgramOutStatus != a {
		//log.Printf("%#v\n", a)
		ProgramOutStatus = a
		if _ProgramOutStatusChan != nil {
			_ProgramOutStatusChan <- a
		}
	}
}

var (
	PreviewOutStatus      PreviewOutStatusType
	_PreviewOutStatusChan chan PreviewOutStatusType
)

// RequestPreviewOutStatus gets chan for beging notifyed PreviewOutStatus changed.
func (vsw Vsw) RequestPreviewOutStatus() <-chan PreviewOutStatusType {
	if _PreviewOutStatusChan == nil {
		_PreviewOutStatusChan = make(chan PreviewOutStatusType)
	}
	return _PreviewOutStatusChan
}

func readPreviewOutStatus(len int, reader *bytes.Reader) {
	var a PreviewOutStatusType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if PreviewOutStatus != a {
		//log.Printf("%#v\n", a)
		PreviewOutStatus = a
		if _PreviewOutStatusChan != nil {
			_PreviewOutStatusChan <- a
		}
	}
}

var (
	CasterMessage      CasterMessageType
	_CasterMessageChan chan CasterMessageType
)

// RequestCasterMessage gets chan for beging notifyed CasterMessage changed.
func (vsw Vsw) RequestCasterMessage() <-chan CasterMessageType {
	if _CasterMessageChan == nil {
		_CasterMessageChan = make(chan CasterMessageType)
	}
	return _CasterMessageChan
}

func readCasterMessage(len int, reader *bytes.Reader) {
	var a CasterMessageType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if CasterMessage != a {
		//log.Printf("%#v\n", a)
		CasterMessage = a
		if _CasterMessageChan != nil {
			_CasterMessageChan <- a
		}
	}
}

var (
	CasterStatistics      CasterStatisticsType
	_CasterStatisticsChan chan CasterStatisticsType
)

// RequestCasterStatistics gets chan for beging notifyed CasterStatistics changed.
func (vsw Vsw) RequestCasterStatistics() <-chan CasterStatisticsType {
	if _CasterStatisticsChan == nil {
		_CasterStatisticsChan = make(chan CasterStatisticsType)
	}
	return _CasterStatisticsChan
}

func readCasterStatistics(len int, reader *bytes.Reader) {
	var a CasterStatisticsType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if CasterStatistics != a {
		//log.Printf("%#v\n", a)
		CasterStatistics = a
		if _CasterStatisticsChan != nil {
			_CasterStatisticsChan <- a
		}
	}
}

var (
	SwitcherStatus      SwitcherStatusType
	_SwitcherStatusChan chan SwitcherStatusType
)

// RequestSwitcherStatus gets chan for beging notifyed SwitcherStatus changed.
func (vsw Vsw) RequestSwitcherStatus() <-chan SwitcherStatusType {
	if _SwitcherStatusChan == nil {
		_SwitcherStatusChan = make(chan SwitcherStatusType)
	}
	return _SwitcherStatusChan
}

func readSwitcherStatus(len int, reader *bytes.Reader) {
	var a SwitcherStatusType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if SwitcherStatus != a {
		//log.Printf("%#v\n", a)
		SwitcherStatus = a
		if _SwitcherStatusChan != nil {
			_SwitcherStatusChan <- a
		}
	}
}

var (
	AudioMixerStatus      AudioMixerStatusType
	_AudioMixerStatusChan chan AudioMixerStatusType
)

// RequestAudioMixerStatus gets chan for beging notifyed AudioMixerStatus changed.
func (vsw Vsw) RequestAudioMixerStatus() <-chan AudioMixerStatusType {
	if _AudioMixerStatusChan == nil {
		_AudioMixerStatusChan = make(chan AudioMixerStatusType)
	}
	return _AudioMixerStatusChan
}

func readAudioMixerStatus(len int, reader *bytes.Reader) {
	var a AudioMixerStatusType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if AudioMixerStatus != a {
		//log.Printf("%#v\n", a)
		AudioMixerStatus = a
		if _AudioMixerStatusChan != nil {
			_AudioMixerStatusChan <- a
		}
	}
}

var (
	AudioMixerAllStatus      AudioMixerAllStatusType
	_AudioMixerAllStatusChan chan AudioMixerAllStatusType
)

// RequestAudioMixerAllStatus gets chan for beging notifyed AudioMixerAllStatus changed.
func (vsw Vsw) RequestAudioMixerAllStatus() <-chan AudioMixerAllStatusType {
	if _AudioMixerAllStatusChan == nil {
		_AudioMixerAllStatusChan = make(chan AudioMixerAllStatusType)
	}
	return _AudioMixerAllStatusChan
}

func readAudioMixerAllStatus(len int, reader *bytes.Reader) {
	var a AudioMixerAllStatusType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if AudioMixerAllStatus != a {
		//log.Printf("%#v\n", a)
		AudioMixerAllStatus = a
		if _AudioMixerAllStatusChan != nil {
			_AudioMixerAllStatusChan <- a
		}
	}
}

var (
	AudioPeakStatus      AudioPeakStatusType
	_AudioPeakStatusChan chan AudioPeakStatusType
)

// RequestAudioPeakStatus gets chan for beging notifyed AudioPeakStatus changed.
func (vsw Vsw) RequestAudioPeakStatus() <-chan AudioPeakStatusType {
	if _AudioPeakStatusChan == nil {
		_AudioPeakStatusChan = make(chan AudioPeakStatusType)
	}
	return _AudioPeakStatusChan
}

func readAudioPeakStatus(len int, reader *bytes.Reader) {
	var a AudioPeakStatusType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if AudioPeakStatus != a {
		//log.Printf("%#v\n", a)
		AudioPeakStatus = a
		if _AudioPeakStatusChan != nil {
			_AudioPeakStatusChan <- a
		}
	}
}

var (
	RecordingResult      RecordingResultType
	_RecordingResultChan chan RecordingResultType
)

// RequestRecordingResult gets chan for beging notifyed RecordingResult changed.
func (vsw Vsw) RequestRecordingResult() <-chan RecordingResultType {
	if _RecordingResultChan == nil {
		_RecordingResultChan = make(chan RecordingResultType)
	}
	return _RecordingResultChan
}

func readRecordingResult(len int, reader *bytes.Reader) {
	var a RecordingResultType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if RecordingResult != a {
		//log.Printf("%#v\n", a)
		RecordingResult = a
		if _RecordingResultChan != nil {
			_RecordingResultChan <- a
		}
	}
}

var (
	SubMode      SubModeType
	_SubModeChan chan SubModeType
)

// RequestSubMode gets chan for beging notifyed SubMode changed.
func (vsw Vsw) RequestSubMode() <-chan SubModeType {
	if _SubModeChan == nil {
		_SubModeChan = make(chan SubModeType)
	}
	return _SubModeChan
}

func readSubMode(len int, reader *bytes.Reader) {
	var a SubModeType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if SubMode != a {
		//log.Printf("%#v\n", a)
		SubMode = a
		if _SubModeChan != nil {
			_SubModeChan <- a
		}
	}
}

var (
	PinpGeometry      PinpGeometryType
	_PinpGeometryChan chan PinpGeometryType
)

// RequestPinpGeometry gets chan for beging notifyed PinpGeometry changed.
func (vsw Vsw) RequestPinpGeometry() <-chan PinpGeometryType {
	if _PinpGeometryChan == nil {
		_PinpGeometryChan = make(chan PinpGeometryType)
	}
	return _PinpGeometryChan
}

func readPinpGeometry(len int, reader *bytes.Reader) {
	var a PinpGeometryType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if PinpGeometry != a {
		//log.Printf("%#v\n", a)
		PinpGeometry = a
		if _PinpGeometryChan != nil {
			_PinpGeometryChan <- a
		}
	}
}

var (
	PinpBorder      PinpBorderType
	_PinpBorderChan chan PinpBorderType
)

// RequestPinpBorder gets chan for beging notifyed PinpBorder changed.
func (vsw Vsw) RequestPinpBorder() <-chan PinpBorderType {
	if _PinpBorderChan == nil {
		_PinpBorderChan = make(chan PinpBorderType)
	}
	return _PinpBorderChan
}

func readPinpBorder(len int, reader *bytes.Reader) {
	var a PinpBorderType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if PinpBorder != a {
		//log.Printf("%#v\n", a)
		PinpBorder = a
		if _PinpBorderChan != nil {
			_PinpBorderChan <- a
		}
	}
}

var (
	ChromaRange      ChromaRangeType
	_ChromaRangeChan chan ChromaRangeType
)

// RequestChromaRange gets chan for beging notifyed ChromaRange changed.
func (vsw Vsw) RequestChromaRange() <-chan ChromaRangeType {
	if _ChromaRangeChan == nil {
		_ChromaRangeChan = make(chan ChromaRangeType)
	}
	return _ChromaRangeChan
}

func readChromaRange(len int, reader *bytes.Reader) {
	var a ChromaRangeType
	if len != int(unsafe.Sizeof(a)) {
		log.Printf(" size mismatch %T len=%d\n", a, len)
		return
	}
	err := binary.Read(reader, _LE, &a)
	checkError(err)
	if ChromaRange != a {
		//log.Printf("%#v\n", a)
		ChromaRange = a
		if _ChromaRangeChan != nil {
			_ChromaRangeChan <- a
		}
	}
}
